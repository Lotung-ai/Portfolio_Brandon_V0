{
  "navBarItemAboutMe": "À Propos",
  "navBarItemProjects": "Projets",
  "navBarItemContact": "Contact",
  "footerTitle": "Bienvenu à mon Portfolio",
  "footerCopyright": "Tous droits réservés.",
  "footerAboutMe": "À propos de moi",
  "footerProjects": "Projets",
  "footerContact": "Contact",
  "homeTitle": "Bienvenue dans mon portfolio",
  "homeText": "Sélectionnez un élément dans le menu",
  "homeDialogue": "À propos de moi",
  "pageAboutMeTitle": "À propos de moi",
  "pageAboutMeDescription": "Bonjour, je suis Brandon KU. Je suis un développeur full-stack spécialisé backend avec C#/.NET, tout en ayant de solides compétences en ReactJS pour le développement frontend. Passionné par la programmation et les nouvelles technologies, j'adore apprendre, expérimenter et repousser mes limites pour concevoir des applications performantes et utiles.",
  "pageAboutMeContactTitle": "Contact",
  "pageAboutMeTopProject": "Projets",
  "pageAboutMeTopProject00": "Microservices",
  "pageAboutMeTopProject01": "ExpressVoiture",
  "pageAboutMeTopProject02": "API Rest",
  "pageAboutMeTechnicalSkills": "Compétences techniques",
  "pageAboutMeTools": "Outils",
  "pageAboutMeFrameworksAndLibraries": "Frameworks et bibliothèques",
  "pageProjectsTitle": "Mes projets",
  "pageContactTitle": "Contactez-moi",
  "pageContactName": "Nom :",
  "pageContactEmail": "Email :",
  "pageContactMessage": "Message :",
  "projectNotFound": "Projet non trouvé",
  "projects": {
    "microservices": {
      "title": "Microservices",
      "intro": "L'objectif est de créer une application basée sur une architecture MicroServices permettant aux utilisateurs autorisés de créer et de gérer les données des patients tout en assurant leur suivi. Un système de reporting sera mis en place pour alerter les utilisateurs lorsqu'un patient présente un risque de diabète.",
      "titleTechnologie": "Technologies",
      "detailTechnologie": "Frameworks et bases de données utilisés : .NET, ASP.NET, Entity Framework, SQL Server, MongoDB, Ocelot.",
      "titleArchitecture": "Architecture",
      "detailArchitecture": "Architecture en microservices pour une meilleure scalabilité et modularité.",
      "titleContainer": "Conteneurisation",
      "detailContainer": "Utilisation de Docker pour l’isolation et le déploiement des services.",
      "titleAut": "MicroServiceAuth",
      "detailAut": "Gère l'authentification et l'autorisation des utilisateurs via des jetons JWT. Il assure la sécurité et valide les accès aux autres services.",

      "titleFront": "MicroFrontEnd",
      "detailFront": "Responsable de l'interface utilisateur, il affiche les données des services et offre une expérience fluide et réactive.",

      "titlePatient": "MicroServiceSQL",
      "detailPatient": "Stocke les données structurées des patients dans SQL Server, gérant les informations personnelles et médicales.",

      "titleNote": "MicroServiceNote",
      "detailNote": "Stocke les notes des patients dans MongoDB, permettant de gérer des données non structurées comme les commentaires médicaux.",

      "titleReport": "MicroServiceReport",
      "detailReport": "Analyse les données des patients pour détecter les risques de diabète et alerter les utilisateurs sur les patients à risque.",

      "titleGateway": "OcelotAPIGw",
      "detailGateway": "Centralise les requêtes des clients et les dirige vers les microservices appropriés tout en garantissant la sécurité et la scalabilité.",

      "titleDocker": "Container",
      "detailDocker": "Utilise Docker pour containeriser les microservices, permettant une gestion et un déploiement flexible des services.",
      "titleChallenge": "Les défis techniques",
      "listChallenge": [
        "Implémenter une architecture microservices",
        "Transmission sécuriée des autorisations",
        "Dockerisation et orchestration des services"
      ],
      "titleSolution": "Les solutions apportées",
      "listSolution": [
        "Utilisation d'Ocelot comme passerelle API",
        "Transfert d'autorisation via cookies JWT",
        "Orchestration via Docker Compose"
      ],
      "link": "Voir le code source"

    },
    "expressVoitures": {
      "title": "ExpressVoitures",
      "intro": "ExpressVoitures est une application de gestion de concessionnaire automobile développée avec ASP.NET Core, permettant de gérer les véhicules, les ventes et les accès des utilisateurs via une interface sécurisée.",

      "titleTechnologie": "Technologies",
      "detailTechnologie": "ASP.NET Core, Entity Framework Core, ASP.NET Core Identity, SQL Server, Razor Pages.",

      "titleArchitecture": "Architecture",
      "detailArchitecture": "Application MVC avec séparation des responsabilités entre l’accès aux données, les contrôleurs et les vues.",

      "titleContainer": "Conteneurisation",
      "detailContainer": "Déploiement dans Microsoft Azure, facilitant l’hébergement et la mise à l’échelle de l’application.",

      "titleAut": "Authentification",
      "detailAut": "Système de connexion sécurisé via ASP.NET Core Identity avec rôles et gestion des utilisateurs.",

      "titleFront": "Interface utilisateur",
      "detailFront": "UI personnalisée pour une meilleure expérience utilisateur, notamment sur la page de connexion.",

      "titleGestionVehicule": "Gestion des véhicules",
      "detailGestionVehicule": "Permet l’ajout, la modification, la suppression et l’affichage des véhicules de la concession.",

      "titleGestionVente": "Gestion des ventes",
      "detailGestionVente": "Fonctionnalités de création, de mise à jour et de suivi des ventes réalisées.",

      "titleSecurity": "Sécurité des accès",
      "detailSecurity": "Utilisation d’ASP.NET Core Identity pour restreindre les pages aux rôles autorisés.",

      "titleAzure": "Hébergement",
      "detailAzure": "Projet déployé sur Azure App Service avec base de données SQL intégrée.",

      "titleUI": "Interface Login",
      "detailUI": "Design personnalisé pour la page de login afin d'améliorer l'expérience utilisateur dès la connexion.",

      "titleChallenge": "Défis rencontrés",
      "listChallenge": [
        "Implémentation sécurisée d’ASP.NET Identity",
        "Création d’un CRUD complexe pour les véhicules et ventes",
        "Déploiement sur Azure avec base SQL Server"
      ],

      "titleSolution": "Solutions apportées",
      "listSolution": [
        "Structure MVC claire et testée",
        "Utilisation des DataAnnotations pour la validation des formulaires",
        "Configuration Azure avec migration automatique de la base"
      ],

      "link": "Voir le projet en ligne"
    },
    "apiRest": {
      "title": "API REST",
      "intro": "API REST est une application backend développée avec ASP.NET Core, utilisant l'approche Code-First d'Entity Framework pour gérer une base de données SQL Server. Elle propose une architecture RESTful sécurisée grâce aux rôles et tokens JWT.",

      "titleTechnologie": "Technologies",
      "detailTechnologie": "ASP.NET Core, Entity Framework Core, SQL Server, JWT.",

      "titleArchitecture": "Architecture",
      "detailArchitecture": "Architecture RESTful avec séparation des responsabilités entre contrôleurs, services et accès aux données (repositories).",

      "titleAut": "Authentification & Autorisation",
      "detailAut": "Système d’authentification basé sur JWT. Les utilisateurs reçoivent un token après identification, et leurs accès sont contrôlés selon des rôles prédéfinis.",

      "titleSecurity": "Sécurité des accès",
      "detailSecurity": "Utilisation des tokens JWT pour sécuriser les communications entre le client et l’API. Gestion des rôles pour restreindre l’accès aux endpoints critiques.",

      "titleEntities": "Gestion des entités",
      "detailEntities": "Implémentation des opérations CRUD (Create, Read, Update, Delete) pour les entités définies dans le modèle de données.",

      "titleSQL": "Connexion à la base de données",
      "detailSQL": "Configuration de la chaîne de connexion avec SQL Server pour une persistance fiable des données.",

      "titleEntityFramework": "Migrations de base de données",
      "detailEntityFramework": "Utilisation d'Entity Framework Core pour la création et l’application des migrations. Synchronisation entre modèle C# et base SQL.",
     
      "titleSwagger": "Documentation de l'API",
      "detailSwagger": "Intégration de Swagger pour générer automatiquement une documentation interactive des endpoints REST et faciliter les tests manuels via une interface web.",

      "titleChallenge": "Défis rencontrés",
      "listChallenge": [
        "Mise en place de l’authentification sécurisée avec JWT",
        "Gestion fine des autorisations via rôles utilisateur",
        "Synchronisation fiable des migrations Entity Framework avec SQL Server",
        "Structuration claire et maintenable de l'API REST"
      ],

      "titleSolution": "Solutions apportées",
      "listSolution": [
        "Utilisation de JWT pour sécuriser l’API sans état",
        "Mise en place d’un système de rôles pour gérer l'accès aux ressources",
        "Adoption d’une architecture RESTful bien découpée en couches (contrôleurs, services, repositories)",
        "Configuration propre des migrations et gestion de la base de données via Entity Framework"
      ],

      "link": "https://github.com/Lotung-ai/APIRest"
    }

  }
}
